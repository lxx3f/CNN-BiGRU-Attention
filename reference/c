#!/usr/bin/env python
# -*- coding:utf-8 -*-
# File: spam_classificaiton.py
# datetime: 2020/7/12 11:32
# software: PyCharm

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import pandas as pd

# 读取垃圾邮件数据
data_init = pd.read_table('SMSSpamCollection', sep='\t', names=['label', 'mem'])
shape = data_init.shape
print(data_init.head())

# 数据预处理
data_init['label'] = data_init.label.map({'ham': 0, 'spam': 1})  # 0代表正常邮件，1代表垃圾邮件

# 划分训练集与测试集
x_train, x_test, y_train, y_test = train_test_split(data_init['mem'], data_init['label'], random_state=1)
# print('Number of rows in the total set:{}'.format(data_init.shape[0]))
# print('Number of rows in the training set:{}'.format(x_train.shape[0]))
# print('Number of rows in the test set:{}'.format(x_test.shape[0]))


# 词袋模型 word of bag处理文本数据，获得稀疏矩阵表示
count_vector = CountVectorizer(stop_words='english')

train_data = count_vector.fit_transform(x_train)

test_data = count_vector.transform(x_test)

# 使用贝叶斯模型对数据进行拟合
naive_bayes = MultinomialNB()
naive_bayes.fit(train_data, y_train)
MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)

predictions_nb = naive_bayes.predict(test_data)

# 逻辑回归对数据进行拟合
logistic_regression = LogisticRegression()
logistic_regression.fit(train_data, y_train)
predictions_lr = logistic_regression.predict(test_data)

# 支持向量机模型对数据进行拟合
svm_clf = svm.SVC(gamma='scale')
svm_clf.fit(train_data, y_train)
predictions_svm = svm_clf.predict(test_data)

# KNN算法
k_neighbor = KNeighborsClassifier(n_neighbors=2,weights='uniform')
k_neighbor.fit(train_data, y_train)
predictions_knn = k_neighbor.predict(test_data)

# 决策树算法
decision_tree = DecisionTreeClassifier()
decision_tree.fit(train_data, y_train)
predictions_dt = decision_tree.predict(test_data)

# 随机森林分类器
random_forest = RandomForestClassifier()
random_forest.fit(train_data, y_train)
predictions_rf = random_forest.predict(test_data)

# GDBT分类器
gdbt = GradientBoostingClassifier()
gdbt.fit(train_data, y_train)
predictions_gdbt = gdbt.predict(test_data)

#  神经网络分类器--多层感知机
mlp = MLPClassifier(solver='lbfgs', activation='logistic')
mlp.fit(train_data, y_train)
predictions_nn = mlp.predict(test_data)

# 模型评估
print('naive bayes Accuracy score:', format(accuracy_score(y_test, predictions_nb)))
print('naive bayes Precision score:', format(precision_score(y_test, predictions_nb)))
print('naive bayes Recall score:', format(recall_score(y_test, predictions_nb)))
print('naive bayes F1 score:', format(f1_score(y_test, predictions_nb)))
print('logistic regression Accuracy score:', format(accuracy_score(y_test, predictions_lr)))
print('logistic regression Precision score:', format(precision_score(y_test, predictions_lr)))
print('logistic regression Recall score:', format(recall_score(y_test, predictions_lr)))
print('logistic regression F1 score:', format(f1_score(y_test, predictions_lr)))
print('support vector machine Accuracy score:', format(accuracy_score(y_test, predictions_svm)))
print('support vector machine Precision score:', format(precision_score(y_test, predictions_svm)))
print('support vector machine Recall score:', format(recall_score(y_test, predictions_svm)))
print('support vector machine F1 score:', format(f1_score(y_test, predictions_svm)))
print('knn Accuracy score:', format(accuracy_score(y_test, predictions_knn)))
print('knn Precision score:', format(precision_score(y_test, predictions_knn)))
print('knn Recall score:', format(recall_score(y_test, predictions_knn)))
print('knn F1 score:', format(f1_score(y_test, predictions_knn)))
print('decision tree Accuracy score:', format(accuracy_score(y_test, predictions_dt)))
print('decision tree Precision score:', format(precision_score(y_test, predictions_dt)))
print('decision tree Recall score:', format(recall_score(y_test, predictions_dt)))
print('decision tree F1 score:', format(f1_score(y_test, predictions_dt)))
print('random forest Accuracy score:', format(accuracy_score(y_test, predictions_rf)))
print('random forest Precision score:', format(precision_score(y_test, predictions_rf)))
print('random forest Recall score:', format(recall_score(y_test, predictions_rf)))
print('random forest F1 score:', format(f1_score(y_test, predictions_rf)))
print('gradient boosting Accuracy score:', format(accuracy_score(y_test, predictions_gdbt)))
print('gradient boosting Precision score:', format(precision_score(y_test, predictions_gdbt)))
print('gradient boosting Recall score:', format(recall_score(y_test, predictions_gdbt)))
print('gradient boosting F1 score:', format(f1_score(y_test, predictions_gdbt)))
print('neural network Accuracy score:', format(accuracy_score(y_test, predictions_nn)))
print('neural network Precision score:', format(precision_score(y_test, predictions_nn)))
print('neural network Recall score:', format(recall_score(y_test, predictions_nn)))
print('neural network F1 score:', format(f1_score(y_test, predictions_nn)))